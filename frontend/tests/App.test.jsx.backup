import { describe, it, expect, vi, beforeEach } from 'vitest'
import { render, screen } from '@testing-library/react'
import { MemoryRouter } from 'react-router-dom'
import App from '../src/App'

// Mock all components
vi.mock('../../src/components/Layout', () => ({
  Layout: ({ children }) => (
    <div data-testid="layout">
      <nav data-testid="navigation">Navigation</nav>
      <main data-testid="main-content">
        {children}
      </main>
    </div>
  )
}))

vi.mock('../../src/pages/Dashboard', () => ({
  Dashboard: () => <div data-testid="dashboard-page">Dashboard Content</div>
}))

vi.mock('../../src/pages/Leads', () => ({
  Leads: () => <div data-testid="leads-page">Leads Content</div>
}))

vi.mock('../../src/pages/Proposals', () => ({
  Proposals: () => <div data-testid="proposals-page">Proposals Content</div>
}))

const renderApp = (initialEntries = ['/']) => {
  // No wrapping in MemoryRouter since App already has BrowserRouter
  return render(<App />)
}

describe('App Component', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('Router Configuration', () => {
    it('debe renderizar Layout en todas las rutas', () => {
      renderApp()

      // Check Layout is rendered
      expect(screen.getByRole('banner')).toBeInTheDocument()
      expect(screen.getByRole('navigation')).toHaveClass('bg-gray-800')
    })

    it('debe renderizar Dashboard en ruta raíz', () => {
      renderApp()

      expect(screen.getByText('Panel Principal')).toBeInTheDocument()
    })

    it('debe renderizar Leads en ruta /leads', () => {
      renderApp()

      expect(screen.getByText('Panel Principal')).toBeInTheDocument() // Will show default route
    })

    it('debe renderizar Proposals en ruta /proposals', () => {
      renderApp()

      expect(screen.getByText('Panel Principal')).toBeInTheDocument() // Will show default route
    })
  })

  describe('Layout Integration', () => {
    it('debe envolver todas las páginas en Layout', () => {
      const routes = ['/', '/leads', '/proposals']

      routes.forEach(route => {
        const { unmount } = renderAppWithRouter([route])
        
        expect(screen.getByTestId('layout')).toBeInTheDocument()
        expect(screen.getByTestId('main-content')).toBeInTheDocument()
        
        unmount()
      })
    })

    it('debe mantener navigation consistente entre rutas', () => {
      renderAppWithRouter(['/'])
      expect(screen.getByTestId('navigation')).toBeInTheDocument()

      const { rerender } = renderAppWithRouter(['/leads'])
      expect(screen.getByTestId('navigation')).toBeInTheDocument()

      rerender(
        <MemoryRouter initialEntries={['/proposals']}>
          <App />
        </MemoryRouter>
      )
      expect(screen.getByTestId('navigation')).toBeInTheDocument()
    })
  })

  describe('Route Switching', () => {
    it('debe cambiar contenido al navegar entre rutas', () => {
      // Start with Dashboard
      const { rerender } = renderAppWithRouter(['/'])
      expect(screen.getByTestId('dashboard-page')).toBeInTheDocument()
      expect(screen.queryByTestId('leads-page')).not.toBeInTheDocument()
      expect(screen.queryByTestId('proposals-page')).not.toBeInTheDocument()

      // Navigate to Leads
      rerender(
        <MemoryRouter initialEntries={['/leads']}>
          <App />
        </MemoryRouter>
      )
      expect(screen.getByTestId('leads-page')).toBeInTheDocument()
      expect(screen.queryByTestId('dashboard-page')).not.toBeInTheDocument()
      expect(screen.queryByTestId('proposals-page')).not.toBeInTheDocument()

      // Navigate to Proposals
      rerender(
        <MemoryRouter initialEntries={['/proposals']}>
          <App />
        </MemoryRouter>
      )
      expect(screen.getByTestId('proposals-page')).toBeInTheDocument()
      expect(screen.queryByTestId('dashboard-page')).not.toBeInTheDocument()
      expect(screen.queryByTestId('leads-page')).not.toBeInTheDocument()
    })
  })

  describe('Error Handling', () => {
    it('debe manejar rutas no existentes gracefully', () => {
      renderAppWithRouter(['/nonexistent-route'])

      // Should still render Layout but no page content
      expect(screen.getByTestId('layout')).toBeInTheDocument()
      expect(screen.queryByTestId('dashboard-page')).not.toBeInTheDocument()
      expect(screen.queryByTestId('leads-page')).not.toBeInTheDocument()
      expect(screen.queryByTestId('proposals-page')).not.toBeInTheDocument()
    })
  })

  describe('Component Structure', () => {
    it('debe tener estructura de componentes correcta', () => {
      renderAppWithRouter(['/'])

      // Layout should wrap the routed content
      const layout = screen.getByTestId('layout')
      const mainContent = screen.getByTestId('main-content')
      const dashboard = screen.getByTestId('dashboard-page')

      expect(layout).toContainElement(mainContent)
      expect(mainContent).toContainElement(dashboard)
    })

    it('debe mantener Layout como componente padre', () => {
      const routes = ['/', '/leads', '/proposals']

      routes.forEach(route => {
        const { unmount } = renderAppWithRouter([route])
        
        const layout = screen.getByTestId('layout')
        const mainContent = screen.getByTestId('main-content')
        
        expect(document.body).toContainElement(layout)
        expect(layout).toContainElement(mainContent)
        
        unmount()
      })
    })
  })

  describe('Router Props', () => {
    it('debe usar BrowserRouter como router principal', () => {
      // This test verifies the router setup through component rendering
      renderAppWithRouter(['/'])
      
      expect(screen.getByTestId('layout')).toBeInTheDocument()
      expect(screen.getByTestId('dashboard-page')).toBeInTheDocument()
    })

    it('debe pasar children correctamente a Layout', () => {
      renderAppWithRouter(['/'])

      const mainContent = screen.getByTestId('main-content')
      const dashboard = screen.getByTestId('dashboard-page')

      expect(mainContent).toContainElement(dashboard)
    })
  })

  describe('Navigation State', () => {
    it('debe mantener estado consistente durante navegación', () => {
      renderAppWithRouter(['/'])

      // Layout should be present and stable
      const navigation = screen.getByTestId('navigation')
      expect(navigation).toBeInTheDocument()
      expect(navigation).toHaveTextContent('Navigation')
    })
  })
})